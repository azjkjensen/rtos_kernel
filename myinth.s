; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_myinth_1:
	DW	0
L_myinth_2:
	DW	0
L_myinth_3:
	DB	"RESETTING",0
	ALIGN	2
resetHandler:
	; >>>>> Line:	8
	; >>>>> void resetHandler(){ 
	jmp	L_myinth_4
L_myinth_5:
	; >>>>> Line:	9
	; >>>>> printString("RESETTING"); 
	mov	ax, L_myinth_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	10
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_4:
	push	bp
	mov	bp, sp
	jmp	L_myinth_5
L_myinth_7:
	DB	0xA,"Tick ",0
	ALIGN	2
tickHandler:
	; >>>>> Line:	13
	; >>>>> void tickHandler(){ 
	jmp	L_myinth_8
L_myinth_9:
	; >>>>> Line:	14
	; >>>>> printString("\nTick "); 
	mov	ax, L_myinth_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	15
	; >>>>> printInt(tickCount); 
	push	word [L_myinth_1]
	call	printInt
	add	sp, 2
	; >>>>> Line:	16
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	17
	; >>>>> tickCount++; 
	inc	word [L_myinth_1]
	mov	sp, bp
	pop	bp
	ret
L_myinth_8:
	push	bp
	mov	bp, sp
	jmp	L_myinth_9
	ALIGN	2
loopLikeABoss:
	; >>>>> Line:	20
	; >>>>> void loopLikeABoss(){ 
	jmp	L_myinth_11
L_myinth_12:
	; >>>>> Line:	22
	; >>>>> for(; i < 5001; i++){ 
	mov	word [bp-2], 0
	; >>>>> Line:	22
	; >>>>> for(; i < 5001; i++){ 
	jmp	L_myinth_14
L_myinth_13:
	; >>>>> Line:	23
	; >>>>> someLocalVariable++; 
	inc	word [L_myinth_2]
L_myinth_16:
	inc	word [bp-2]
L_myinth_14:
	cmp	word [bp-2], 5001
	jl	L_myinth_13
L_myinth_15:
	mov	sp, bp
	pop	bp
	ret
L_myinth_11:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_12
L_myinth_21:
	DB	") IGNORED",0
L_myinth_20:
	DB	0xA,"KEYPRESS (",0
L_myinth_19:
	DB	0xA,"DELAY COMPLETE",0xA,0
L_myinth_18:
	DB	0xA,"DELAY KEY PRESSED",0xA,0
	ALIGN	2
keypressHandler:
	; >>>>> Line:	27
	; >>>>> void keypressHandler(){ 
	jmp	L_myinth_22
L_myinth_23:
	; >>>>> Line:	28
	; >>>>> if((char)KeyBuffer == 'd'){ 
	cmp	byte [KeyBuffer], 100
	jne	L_myinth_24
	; >>>>> Line:	29
	; >>>>> printString("\nDELAY KEY PRESSED\n"); 
	mov	ax, L_myinth_18
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> loopLikeABos 
	call	loopLikeABoss
	; >>>>> Line:	31
	; >>>>> printString("\nDELAY COMPLETE\n"); 
	mov	ax, L_myinth_19
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_25
L_myinth_24:
	; >>>>> Line:	34
	; >>>>> printString("\nKEYPRESS ("); 
	mov	ax, L_myinth_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> printChar((char)KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_25:
	mov	sp, bp
	pop	bp
	ret
L_myinth_22:
	push	bp
	mov	bp, sp
	jmp	L_myinth_23
