; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	41
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	42
	; >>>>> while(1){ 
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	43
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
L_yakc_4:
	jmp	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
L_yakc_10:
	DB	"Priority: ",0
L_yakc_9:
	DB	"SP: ",0
L_yakc_8:
	DB	"Task Printout:",0xA,0
L_yakc_7:
	DB	0xA,"No task to print",0xA,0
	ALIGN	2
printTask:
	; >>>>> Line:	47
	; >>>>> void printTask(Task t){ 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	48
	; >>>>> if(!t.priority){ 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_13
	; >>>>> Line:	49
	; >>>>> printString("\nNo task to print\n"); 
	mov	ax, L_yakc_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	50
	; >>>>>  
	jmp	L_yakc_14
L_yakc_13:
	; >>>>> Line:	52
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	53
	; >>>>> printString("Task Printout:\n"); 
	mov	ax, L_yakc_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	54
	; >>>>> printString("SP: "); 
	mov	ax, L_yakc_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	55
	; >>>>> printInt((int)t.stackPtr); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	56
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	57
	; >>>>> printString("Priority: "); 
	mov	ax, L_yakc_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	58
	; >>>>> printInt(t.priority); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_14:
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	jmp	L_yakc_12
	ALIGN	2
YKInitialize:
	; >>>>> Line:	65
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	66
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	68
	; >>>>> currentTaskCount = 0; 
	mov	word [currentTaskCount], 0
	; >>>>> Line:	69
	; >>>>> YKRunTask = 0; 
	mov	word [YKRunTask], 0
	; >>>>> Line:	70
	; >>>>> YKCurrentRunningTask = 0; 
	mov	word [YKCurrentRunningTask], 0
	; >>>>> Line:	71
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	72
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	73
	; >>>>> YKContextSP = 0; 
	mov	word [YKContextSP], 0
	; >>>>> Line:	74
	; >>>>> YKRestoreSP = 0; 
	mov	word [YKRestoreSP], 0
	; >>>>> Line:	75
	; >>>>> readyRoot = 0; 
	mov	word [readyRoot], 0
	; >>>>> Line:	78
	; >>>>> YKNewTask(&YK 
	mov	al, 255
	push	ax
	mov	ax, (YKIdleTaskStack+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
	ALIGN	2
YKAddReadyTask:
	; >>>>> Line:	83
	; >>>>> void YKAddReadyTask(TaskPtr readyTask) { 
	jmp	L_yakc_19
L_yakc_20:
	; >>>>> Line:	85
	; >>>>> if(readyTask == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_21
	; >>>>> Line:	86
	; >>>>> return; 
	jmp	L_yakc_22
	jmp	L_yakc_23
L_yakc_21:
	; >>>>> Line:	89
	; >>>>> }else if(readyRoot == 0){ 
	mov	ax, word [readyRoot]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	90
	; >>>>> readyTask->next = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	91
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	92
	; >>>>> readyRoot = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyRoot], ax
	; >>>>> Line:	93
	; >>>>> readyTail = readyTask; 
	mov	word [readyTail], ax
	; >>>>> Line:	94
	; >>>>> return; 
	jmp	L_yakc_22
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	97
	; >>>>> while(currentNode != 0) { 
	mov	ax, word [readyRoot]
	mov	word [bp-2], ax
	; >>>>> Line:	97
	; >>>>> while(currentNode != 0) { 
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	98
	; >>>>> if (readyTask->priority > currentNode->priority) { 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jge	L_yakc_29
	; >>>>> Line:	99
	; >>>>> if(currentNode->next == 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	100
	; >>>>> eadyTask->prev = currentNode 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	101
	; >>>>> readyTask->prev = currentNode; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	102
	; >>>>> readyTask->next = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> readyTail = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyTail], ax
	; >>>>> Line:	104
	; >>>>> return; 
	jmp	L_yakc_22
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	105
	; >>>>> }else if(readyTask->priority < (currentNode->next)->priority) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jge	L_yakc_32
	; >>>>> Line:	108
	; >>>>> readyTask->next = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	108
	; >>>>> readyTask->next = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> currentNode->next = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	110
	; >>>>> temp->prev = readyTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	111
	; >>>>> readyTask->prev = currentNode 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	112
	; >>>>> return; 
	jmp	L_yakc_22
L_yakc_32:
L_yakc_31:
	; >>>>> Line:	116
	; >>>>> currentNode= currentNode->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	jmp	L_yakc_33
L_yakc_29:
	; >>>>> Line:	118
	; >>>>> readyTask->next = currentNode; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	119
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	120
	; >>>>> currentNode->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	121
	; >>>>> readyRoot = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyRoot], ax
	; >>>>> Line:	122
	; >>>>> return; 
	jmp	L_yakc_22
L_yakc_33:
L_yakc_27:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_26
L_yakc_28:
L_yakc_25:
L_yakc_23:
L_yakc_22:
	mov	sp, bp
	pop	bp
	ret
L_yakc_19:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_20
L_yakc_35:
	DB	"SP should be: ",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	128
	; >>>>> void YKNewTask(void (*task)(void), void* taskStack, unsigned char priority){ 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	136
	; >>>>> for (i = 0; i < 8; i++) { 
	mov	ax, word [bp+6]
	sub	ax, 22
	mov	word [bp-8], ax
	mov	word [bp-10], 0
	; >>>>> Line:	136
	; >>>>> for (i = 0; i < 8; i++) { 
	mov	word [bp-10], 0
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	137
	; >>>>> newSP[i] = 0; 
	mov	ax, word [bp-10]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-8]
	mov	word [si], 0
L_yakc_41:
	inc	word [bp-10]
L_yakc_39:
	cmp	word [bp-10], 8
	jl	L_yakc_38
L_yakc_40:
	; >>>>> Line:	139
	; >>>>> newSP[8] = (unsigned)task; 
	mov	si, word [bp-8]
	add	si, 16
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	140
	; >>>>> newSP[9] = 0; 
	mov	si, word [bp-8]
	add	si, 18
	mov	word [si], 0
	; >>>>> Line:	141
	; >>>>> newSP[10] = 0x0200; 
	mov	si, word [bp-8]
	add	si, 20
	mov	word [si], 512
	; >>>>> Line:	143
	; >>>>> temp->stackPtr = newSP-1; 
	mov	ax, word [bp-8]
	sub	ax, 2
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], ax
	; >>>>> Line:	149
	; >>>>> temp = &ykTasks[currentTaskCount]; 
	mov	ax, word [currentTaskCount]
	mov	cx, 12
	imul	cx
	add	ax, ykTasks
	mov	word [bp-2], ax
	; >>>>> Line:	151
	; >>>>> temp->taskFnPtr = (int*)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	152
	; >>>>> temp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	153
	; >>>>> temp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	154
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	155
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	156
	; >>>>> currentTaskCount++; 
	inc	word [currentTaskCount]
	; >>>>> Line:	157
	; >>>>> YKAddReadyTask(temp); 
	push	word [bp-2]
	call	YKAddReadyTask
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printString("SP should be: "); 
	mov	ax, L_yakc_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printInt((int)taskStack); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> if(YKRunTask){ 
	mov	ax, word [YKRunTask]
	test	ax, ax
	je	L_yakc_42
	; >>>>> Line:	163
	; >>>>> Y 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_42:
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_37
L_yakc_44:
	DB	0xA,0xA,"Function Pointer: ",0
	ALIGN	2
YKRun:
	; >>>>> Line:	168
	; >>>>> void YKRun() { 
	jmp	L_yakc_45
L_yakc_46:
	; >>>>> Line:	174
	; >>>>> if(readyRoot == 0){ 
	mov	ax, word [readyRoot]
	test	ax, ax
	jne	L_yakc_47
	; >>>>> Line:	176
	; >>>>> return; 
	jmp	L_yakc_48
L_yakc_47:
	; >>>>> Line:	179
	; >>>>> YKRunTask = 1; 
	mov	word [YKRunTask], 1
	; >>>>> Line:	180
	; >>>>> YKRestoreSP = (int)(readyRoot->stackPtr); 
	mov	si, word [readyRoot]
	add	si, 2
	mov	ax, word [si]
	mov	word [YKRestoreSP], ax
	; >>>>> Line:	181
	; >>>>> printString("\n\nFunction Pointer: "); 
	mov	ax, L_yakc_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> printInt((int)(readyRoot->taskFnPtr)); 
	mov	si, word [readyRoot]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	184
	; >>>>> YKCurrentRunningTask = readyRoot; 
	mov	ax, word [readyRoot]
	mov	word [YKCurrentRunningTask], ax
	; >>>>> Line:	185
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	186
	; >>>>> YKDispatcher(0, (int*)readyRoot->taskFnPtr); 
	mov	si, word [readyRoot]
	push	word [si]
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 4
L_yakc_48:
	mov	sp, bp
	pop	bp
	ret
L_yakc_45:
	push	bp
	mov	bp, sp
	jmp	L_yakc_46
L_yakc_50:
	DB	"SCHEDULER: ",0xA,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	189
	; >>>>> void YKScheduler(unsigned contextSave){ 
	jmp	L_yakc_51
L_yakc_52:
	; >>>>> Line:	190
	; >>>>> printString("SCHEDULER: \n"); 
	mov	ax, L_yakc_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	193
	; >>>>> if (readyRoot != YKCurrentRunningTask) { 
	mov	ax, word [YKCurrentRunningTask]
	cmp	ax, word [readyRoot]
	je	L_yakc_53
	; >>>>> Line:	194
	; >>>>> Y 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	195
	; >>>>> YKContextSP = (int)(YKCurrentRunningTask->stackPtr); 
	mov	si, word [YKCurrentRunningTask]
	add	si, 2
	mov	ax, word [si]
	mov	word [YKContextSP], ax
	; >>>>> Line:	196
	; >>>>> YKRestoreSP = (int)(readyRoot->stackPtr); 
	mov	si, word [readyRoot]
	add	si, 2
	mov	ax, word [si]
	mov	word [YKRestoreSP], ax
	; >>>>> Line:	202
	; >>>>> YKCurrentRunningTask = readyRoot; 
	mov	ax, word [readyRoot]
	mov	word [YKCurrentRunningTask], ax
	; >>>>> Line:	203
	; >>>>> YKDispatcher(contextSave, readyRoot->taskFnPtr); 
	mov	si, word [readyRoot]
	push	word [si]
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 4
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_51:
	push	bp
	mov	bp, sp
	jmp	L_yakc_52
L_yakc_55:
	DB	"Finished dispatcher",0
	ALIGN	2
printhelp:
	; >>>>> Line:	207
	; >>>>> void printhelp() { 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	208
	; >>>>> printString("Finished dispatcher"); 
	mov	ax, L_yakc_55
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
ykTasks:
	TIMES	132 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
currentTaskCount:
	TIMES	2 db 0
YKRunTask:
	TIMES	2 db 0
YKContextSP:
	TIMES	2 db 0
YKRestoreSP:
	TIMES	2 db 0
YKCurrentRunningTask:
	TIMES	2 db 0
YKIdleTaskStack:
	TIMES	512 db 0
readyRoot:
	TIMES	2 db 0
readyTail:
	TIMES	2 db 0
