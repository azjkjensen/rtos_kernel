; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	34
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_1
L_yakc_2:
L_yakc_3:
	; >>>>> Line:	35
	; >>>>> while(1); 
L_yakc_4:
	jmp	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKInitialize:
	; >>>>> Line:	41
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_7
L_yakc_8:
	; >>>>> Line:	42
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	44
	; >>>>> currentTaskCount = 0; 
	mov	word [currentTaskCount], 0
	; >>>>> Line:	45
	; >>>>> YKRunTask = 0; 
	mov	word [YKRunTask], 0
	; >>>>> Line:	46
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	47
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	48
	; >>>>> YKContextSP = 0; 
	mov	word [YKContextSP], 0
	; >>>>> Line:	51
	; >>>>> YKNewTask(&YKIdleTask,&YKIdleTaskSt 
	mov	al, 255
	push	ax
	mov	ax, YKIdleTaskStack
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_7:
	push	bp
	mov	bp, sp
	jmp	L_yakc_8
	ALIGN	2
YKAddReadyTask:
	; >>>>> Line:	55
	; >>>>> void YKAddReadyTask(TaskPtr readyTask) { 
	jmp	L_yakc_10
L_yakc_11:
	; >>>>> Line:	56
	; >>>>> if(readyTask == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_12
	; >>>>> Line:	57
	; >>>>> return; 
	jmp	L_yakc_13
	jmp	L_yakc_14
L_yakc_12:
	; >>>>> Line:	60
	; >>>>> }else if(readyRoot == 0){ 
	mov	ax, word [readyRoot]
	test	ax, ax
	jne	L_yakc_15
	; >>>>> Line:	61
	; >>>>> readyTask->next = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	62
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	63
	; >>>>> readyRoot = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyRoot], ax
	; >>>>> Line:	64
	; >>>>> readyTail = readyTask; 
	mov	word [readyTail], ax
	; >>>>> Line:	65
	; >>>>> return; 
	jmp	L_yakc_13
	jmp	L_yakc_16
L_yakc_15:
	; >>>>> Line:	68
	; >>>>> while(currentNode != 0) { 
	mov	ax, word [readyRoot]
	mov	word [bp-2], ax
	; >>>>> Line:	68
	; >>>>> while(currentNode != 0) { 
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	69
	; >>>>> if (readyTask->priority > currentNode->priority) { 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jge	L_yakc_20
	; >>>>> Line:	70
	; >>>>> if(currentNode->next == 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_21
	; >>>>> Line:	71
	; >>>>> currentNode->next = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	72
	; >>>>>  
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	73
	; >>>>> readyTask->next = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	74
	; >>>>> readyTail = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyTail], ax
	; >>>>> Line:	75
	; >>>>> return; 
	jmp	L_yakc_13
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	76
	; >>>>> }else if(readyTask->priority < (currentNode->next)->priority) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jge	L_yakc_23
	; >>>>> Line:	79
	; >>>>> readyTask->next = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	79
	; >>>>> readyTask->next = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> currentNode->next = readyTask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	81
	; >>>>> temp->prev = readyTask; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> readyTask->prev = currentNode; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	83
	; >>>>> return; 
	jmp	L_yakc_13
L_yakc_23:
L_yakc_22:
	; >>>>> Line:	87
	; >>>>> currentNode= currentNode->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	jmp	L_yakc_24
L_yakc_20:
	; >>>>> Line:	89
	; >>>>> readyTask->next = currentNode; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	90
	; >>>>> readyTask->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	91
	; >>>>> currentNode->prev = readyTask; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> readyRoot = readyTask; 
	mov	ax, word [bp+4]
	mov	word [readyRoot], ax
	; >>>>> Line:	93
	; >>>>> return; 
	jmp	L_yakc_13
L_yakc_24:
L_yakc_18:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_17
L_yakc_19:
L_yakc_16:
L_yakc_14:
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_10:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_11
	ALIGN	2
YKNewTask:
	; >>>>> Line:	99
	; >>>>> void YKNewTask(void (*Task)(void), void* taskStack, unsigned char priority){ 
	jmp	L_yakc_26
L_yakc_27:
	; >>>>> Line:	102
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	104
	; >>>>> temp = &ykTasks[currentTaskCount]; 
	mov	ax, word [currentTaskCount]
	mov	cx, 12
	imul	cx
	add	ax, ykTasks
	mov	word [bp-2], ax
	; >>>>> Line:	106
	; >>>>> temp->stackPtr  
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	108
	; >>>>> temp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> temp->delay = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	112
	; >>>>> currentTaskCount++; 
	inc	word [currentTaskCount]
	; >>>>> Line:	113
	; >>>>> YKAddReadyTask(temp); 
	push	word [bp-2]
	call	YKAddReadyTask
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_26:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_27
L_yakc_29:
	DB	"readyRoot is null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	117
	; >>>>> void YKRun() { 
	jmp	L_yakc_30
L_yakc_31:
	; >>>>> Line:	118
	; >>>>> if(readyRoot == 0){ 
	mov	ax, word [readyRoot]
	test	ax, ax
	jne	L_yakc_32
	; >>>>> Line:	119
	; >>>>> printString("readyRoot is null"); 
	mov	ax, L_yakc_29
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> return; 
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	122
	; >>>>> YKRunTask = 1; 
	mov	word [YKRunTask], 1
	; >>>>> Line:	123
	; >>>>> YKContextSP = *(int*)(readyRoot->stackPtr); 
	mov	si, word [readyRoot]
	mov	si, word [si]
	mov	ax, word [si]
	mov	word [YKContextSP], ax
	; >>>>> Line:	124
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
L_yakc_33:
	mov	sp, bp
	pop	bp
	ret
L_yakc_30:
	push	bp
	mov	bp, sp
	jmp	L_yakc_31
	ALIGN	2
YKScheduler:
	; >>>>> Line:	128
	; >>>>> void YKScheduler(unsigned contextSave){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	130
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	jmp	L_yakc_36
	ALIGN	2
ykTasks:
	TIMES	132 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
currentTaskCount:
	TIMES	2 db 0
YKRunTask:
	TIMES	2 db 0
YKContextSP:
	TIMES	2 db 0
YKIdleTaskStack:
	TIMES	512 db 0
readyRoot:
	TIMES	2 db 0
readyTail:
	TIMES	2 db 0
